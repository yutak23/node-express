openapi: 3.0.0
info:
  title: ユーザー管理API
  version: '1.0'
  contact:
    email: user-api@example.com
  description: ユーザー情報を作成・更新・取得・削除するためのAPIです
  license:
    name: MIT
tags:
  - name: User API
servers:
  - url: 'http://localhost:3000'
paths:
  '/api/v1/user/{id}':
    parameters:
      - schema:
          type: integer
          example: 1
          format: int32
          minimum: 1
        name: id
        in: path
        required: true
        description: ユーザーID
    get:
      summary: ユーザ情報取得API
      operationId: get-users-userId
      description: 一致したユーザーIDを持つユーザーの情報を取得します。
      tags:
        - User API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: ユーザ情報更新API
      operationId: patch-users-userId
      description: |-
        既存のユーザーの情報を更新することができます。
        ※ただしメールアドレスの更新はできません。
      tags:
        - User API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_user'
        description: ''
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: ユーザ情報削除API
      operationId: delete-users-userId
      description: 一致したユーザーIDを持つユーザーの情報を削除します。
      tags:
        - User API
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/users:
    get:
      summary: Your GET endpoint
      operationId: get-api-v1-users
      description: 全てのユーザー情報を取得します。
      tags:
        - User API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: 総ユーザー数
                    minimum: 0
                    format: int32
                    example: 3
                  users:
                    type: array
                    minItems: 0
                    description: ユーザー情報の配列
                    items:
                      $ref: '#/components/schemas/user'
                required:
                  - total
                  - users
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 取得開始位置
        - schema:
            type: integer
            minimum: 0
            default: 10
            example: 10
          in: query
          name: limit
          description: 取得上限数
  /api/v1/user:
    post:
      summary: ユーザ情報作成API
      operationId: post-user
      description: 新しいユーザーを作成します。
      tags:
        - User API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: ''
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email Already Taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters: []
    parameters: []
components:
  schemas:
    base_user:
      title: user
      type: object
      description: ''
      properties:
        id:
          type: integer
          description: 指定されたユーザーの一意の識別子。
          example: 1
          minimum: 1
          readOnly: true
        email:
          type: string
          format: email
          example: sample@example.com
          description: メールアドレス
        full_name:
          type: string
          minLength: 1
          maxLength: 32
          example: 山田 太郎
          description: 名前
          nullable: true
        created_at:
          type: integer
          format: int64
          description: 作成日時（UNIX TIME：秒）
          example: 1639444400
          minimum: 1600000000
          readOnly: true
        updated_at:
          type: integer
          description: 更新日時（UNIX TIME：秒）
          example: 1639444400
          minimum: 1600000000
          readOnly: true
    user:
      title: user
      additionalProperties: false
      properties:
        id: {}
        email: {}
        full_name: {}
        created_at: {}
        updated_at: {}
      allOf:
        - $ref: '#/components/schemas/base_user'
        - type: object
      required:
        - id
        - email
        - full_name
        - created_at
        - updated_at
    update_user:
      title: update_user
      additionalProperties: false
      properties:
        email: {}
        full_name: {}
      allOf:
        - $ref: '#/components/schemas/base_user'
        - type: object
    Error:
      title: Error
      type: object
      description: ''
      properties:
        message:
          type: string
          example: data not found
          minLength: 1
          description: エラーメッセージ
        status_code:
          type: integer
          example: 404
          description: HTTPステータスコード
          minimum: 300
          maximum: 530
        path:
          type: string
          example: 'GET:/api/v1/not_found'
          description: エラー発生APIパス
      required:
        - message
        - status_code
        - path
